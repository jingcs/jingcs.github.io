<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>给Hexo安装主题模板并美化</title>
    <url>/2022/06/16/616-advance-ui/</url>
    <content><![CDATA[<h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p>前提：已搭建好网页，想美化网站。</p>
<p>美化网站，可以从0开始写UI界面，静态网站也不复杂就是了。但这样比较慢，有很多已经写好的开源模板可以一件套用（类比当年QQ空间的脚本）<a href="https://hexo.voxel.site/">这个网站</a>列举了Hexo下Top10的热门开源模板。试了其中俩个。</p>
<p>Next：更简洁</p>
<p>Matery：挺花里胡哨的，功能丰富。整体画风更随意一些（？比如文档大小写混杂hhh 亮点是可以卡片式排版。</p>
<h2 id="主题安装步骤"><a href="#主题安装步骤" class="headerlink" title="主题安装步骤"></a>主题安装步骤</h2><p>安装主题很简单，就是把主题放进博客的theme文件夹，conf中改主题名，然后hexo更新页面即可。</p>
<p>下面步骤根据官方文档整理</p>
<ul>
<li><p>下载想要的主题</p>
<p>要先cd到对应hexo博客下，然后下载主题，喜欢哪个下哪个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载next</span><br><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line">#下载matery</span><br><span class="line">git clone https://github.com/blinkfox/hexo-theme-matery.git themes/hexo-theme-matery</span><br></pre></td></tr></table></figure>
</li>
<li><p>启用主题</p>
<p>博客根目录下的_config.yml文件，theme从默认的landscape改为主题名。如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next/hexo-theme-matery/其他安装的主题</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新下看效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

<p>没问题就同步到github即可</p>
</li>
</ul>
<p>其中，matery就一种样式，Next可以更改主题样式</p>
<p>在theme&#x2F;next&#x2F;下的config_yml中scheme，有Muse，Mist，Pisces，Gemini四种</p>
<p>改完之后同样更新看效果没问题就同步即可。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>安装教程</p>
<ul>
<li><p>next: <a href="https://theme-next.iissnan.com/getting-started.html">https://theme-next.iissnan.com/getting-started.html</a></p>
</li>
<li><p>Matery: <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>TechNotes</category>
        <category>WebUI</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>Matery</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo报错YAMLException</title>
    <url>/2022/06/16/616-hexo-debug/</url>
    <content><![CDATA[<p>description: YAMLException can not read a block mapping entry; a multiline key may not be an implicit key</p>
<p>报错，hexo无法将md文档转网页</p>
<p>基本因为格式不对，空格少打了或者多大了。</p>
<p>比如categories:【-】后面有空格 不是直接 -hexo的</p>
<p>比如标题有特殊符号等等（目前测试出不能使用的：[ ]</p>
]]></content>
      <categories>
        <category>TechNotes</category>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>整理，一步步的个人博客搭建及美化</title>
    <url>/2022/06/16/616-summary/</url>
    <content><![CDATA[<h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><ol>
<li><a href="http://jingcs.github.io/2022/06/16/hexo-gitpages-install/">搭建网站</a> 包括hexo+github建立可访问网站，域名修改，插入图片。</li>
<li><a href="http://jingcs.github.io/2022/06/16/616-hexo-usage-backup/">添加新日志</a> 包括如何在建立的网站上写日志，日志的分类标签规范</li>
<li><a href="http://jingcs.github.io/2022/06/16/616-advance-ui/">更改美化网站</a> 包括下载并安装更新不同的网页主题设计</li>
<li>扩展网页功能。</li>
</ol>
]]></content>
      <categories>
        <category>TechNotes</category>
        <category>Web</category>
        <category>Summary</category>
        <category>Doing</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>GithubPages</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SMTP定时自动发送邮件</title>
    <url>/2022/07/17/c-smtp-mails/</url>
    <content><![CDATA[<p>想做一个定时爬取煤炉上新并推送的东西，总之这是第一步。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendmail</span>()</span> &#123;</span><br><span class="line">           <span class="comment">//MessageBox.Show(&quot;进入&quot;);</span></span><br><span class="line">           <span class="built_in">string</span> user = <span class="string">&quot;xxxxxx@163.com&quot;</span>;</span><br><span class="line">           <span class="built_in">string</span> password = <span class="string">&quot;password&quot;</span>;</span><br><span class="line">           <span class="built_in">string</span> host = <span class="string">&quot;smtp.163.com&quot;</span>;<span class="comment">//设置邮件的服务器</span></span><br><span class="line">           <span class="built_in">string</span> mailAddress = <span class="string">&quot;xxxxxx@163.com&quot;</span>; <span class="comment">//替换成你的hotmail账户</span></span><br><span class="line">           <span class="built_in">string</span> ToAddress = <span class="string">&quot;xxxxx@163.com&quot;</span>;<span class="comment">//目标邮件地址。</span></span><br><span class="line"></span><br><span class="line">           <span class="built_in">string</span> title = <span class="string">&quot;这是邮件标题&quot;</span>;</span><br><span class="line">           <span class="built_in">string</span> content = <span class="string">&quot;这是邮件的内容&quot;</span>;</span><br><span class="line">           <span class="built_in">string</span> fileAddress = <span class="string">&quot;xxxxxxx&quot;</span>;<span class="comment">//这是附件的地址,绝对地址要加@</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">//初始化SMTP类</span></span><br><span class="line">           SmtpClient smtp = <span class="keyword">new</span> SmtpClient(host);</span><br><span class="line">           smtp.EnableSsl = <span class="literal">true</span>; <span class="comment">//开启安全连接。</span></span><br><span class="line">           smtp.Credentials = <span class="keyword">new</span> NetworkCredential(user, password); <span class="comment">//创建用户凭证</span></span><br><span class="line">           smtp.DeliveryMethod = SmtpDeliveryMethod.Network; <span class="comment">//使用网络传送</span></span><br><span class="line">           MailMessage message = <span class="keyword">new</span> MailMessage(mailAddress, ToAddress, title, content); <span class="comment">//创建邮件</span></span><br><span class="line">           Attachment attachment = <span class="keyword">new</span> Attachment(fileAddress);</span><br><span class="line">           message.Attachments.Add(attachment);</span><br><span class="line"></span><br><span class="line">           MessageBox.Show(<span class="string">&quot;等待发送中...&quot;</span>);</span><br><span class="line">           message.IsBodyHtml = <span class="literal">true</span>;  <span class="comment">//这里很重要，漏了的话发出去的是html代码</span></span><br><span class="line">           smtp.Send(message); <span class="comment">//发送邮件</span></span><br><span class="line">           smtp.Dispose();</span><br><span class="line">           message.Dispose();</span><br><span class="line">           attachment.Dispose();</span><br><span class="line">           MessageBox.Show(<span class="string">&quot;邮件发送成功！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TechNotes</category>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>.Net</tag>
        <tag>SMTP</tag>
      </tags>
  </entry>
  <entry>
    <title>在google中添加站点地图（Hexo和Wp）</title>
    <url>/2022/07/15/create-sitemap/</url>
    <content><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>搜索引擎排位是件生意，加上每天无数个新网站，一般来说搜索引擎不会主动收录你的自建网站！（博客园这种二级衍生的除外，或者有篇日志被第三方引流百万点击突然火了，引起大牛注意.jpg）于是自建网站，我们需要手动向每个搜索引擎提出收录请求，才会被搜到。</p>
<p>整体步骤如下</p>
<ol>
<li><p>找到想被收录的搜索引擎站点</p>
</li>
<li><p>录入并验证网站</p>
</li>
<li><p>为网站生成XML站点地图</p>
</li>
<li><p>将XML加入到搜索引擎sitemap中</p>
</li>
<li><p>测试验证是否被收录</p>
</li>
</ol>
<h2 id="1-找到想被收录的搜索引擎站点"><a href="#1-找到想被收录的搜索引擎站点" class="headerlink" title="1 找到想被收录的搜索引擎站点"></a>1 找到想被收录的搜索引擎站点</h2><p>这里列俩常用的</p>
<p>google: <a href="https://search.google.com/search-console">https://search.google.com/search-console</a></p>
<p>Baidu: <a href="https://ziyuan.baidu.com/site/index">https://ziyuan.baidu.com/site/index</a></p>
<p>Bing：<a href="https://www.bing.com/webmasters">https://www.bing.com/webmasters</a></p>
<p>其他的可自行搜索</p>
<h2 id="2-录入并验证网站"><a href="#2-录入并验证网站" class="headerlink" title="2 录入并验证网站"></a>2 录入并验证网站</h2><p>搜索引擎需要验证你是网站的所有者。（为什么？后面会说隐患）</p>
<p>以google search console为例 添加资源</p>
<p>网域和网址前缀都可以。这里演示前者【网域】。</p>
<p><img src="/pics/google_console.png" alt="google_console"></p>
<p>namesilo好像可以登录验证，这里以所有DNS服务商为例。</p>
<p>复制google给的验证字符串。</p>
<p><img src="/pics/dns_copy.png" alt="google_console"></p>
<p>打开域名管理网站，这里用的cloudflare，DNS解析处，选择TXT，粘贴</p>
<p><img src="/pics/add-txt-google.png" alt="google_console"></p>
<p>回到google界面点验证，就ok了。</p>
<h2 id="3-为网站生成XML站点地图"><a href="#3-为网站生成XML站点地图" class="headerlink" title="3 为网站生成XML站点地图"></a>3 为网站生成XML站点地图</h2><p>站点地图简单说就是 你网站中所有日志标题和链接的list合集。</p>
<h3 id="3-1-wordpress"><a href="#3-1-wordpress" class="headerlink" title="3.1 wordpress"></a>3.1 wordpress</h3><p>可以安装插件XML Sitemaps - active激活</p>
<p>左菜单栏 - settings- XML-sitemap</p>
<p>复制出XML的url（The URL to your sitemap index file is: x x x x x x x）</p>
<p>粘到搜索引擎的站点地图即可（part 4）</p>
<h3 id="3-2-Hexo-Github-Pages"><a href="#3-2-Hexo-Github-Pages" class="headerlink" title="3.2 Hexo Github Pages"></a>3.2 Hexo Github Pages</h3><p>参考教程<a href="https://mizeri.github.io/2021/04/18/hexo-sitemap-google/">1</a></p>
<p>cd到博客目录下，安装hexo-generator-sitemap插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save #google的XML用这个</span><br><span class="line">npm install hexo-generator-sitemap --save #百度的XML用这个</span><br></pre></td></tr></table></figure>

<p>生成XML站点地图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>博客目录下可以找到新生成的sitemap.xml</p>
<p>将更新后的博客发布，找到xml文件的链接</p>
<p>粘到搜索引擎站点地图里即可（part 4）</p>
<h2 id="4-将XML加入到搜索引擎sitemap中"><a href="#4-将XML加入到搜索引擎sitemap中" class="headerlink" title="4 将XML加入到搜索引擎sitemap中"></a>4 将XML加入到搜索引擎sitemap中</h2><p>站点地图-添加新的站点地图-将链接粘过去就好</p>
<p>链接格式一般是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网址名/xxxxx.xml</span><br><span class="line">网站名/xml_sitemap=params=</span><br></pre></td></tr></table></figure>

<p>都是可以的。</p>
<h3 id="4-1-无法获取-x2F-无法读取此站点地图"><a href="#4-1-无法获取-x2F-无法读取此站点地图" class="headerlink" title="4.1 无法获取&#x2F;无法读取此站点地图"></a>4.1 无法获取&#x2F;无法读取此站点地图</h3><p>google有延时，一般1～3天才会更新。</p>
<p>google中的站点可以同步到bing，我去bing试了下，几分钟后显示成功。</p>
<h2 id="5-测试验证是否被收录"><a href="#5-测试验证是否被收录" class="headerlink" title="5 测试验证是否被收录"></a>5 测试验证是否被收录</h2><p>site: xxxxx（你的网站名）</p>
<p>能搜到就是被收录了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>Hexo博客站点地图配置（Google）<a href="https://mizeri.github.io/2021/04/18/hexo-sitemap-google/">https://mizeri.github.io/2021/04/18/hexo-sitemap-google/</a></li>
</ol>
]]></content>
      <categories>
        <category>TechNotes</category>
        <category>SEO</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Google</tag>
        <tag>Search</tag>
        <tag>Sitemap</tag>
        <tag>XML</tag>
        <tag>Wordpress</tag>
        <tag>DNS</tag>
        <tag>Bing</tag>
        <tag>Baidu</tag>
      </tags>
  </entry>
  <entry>
    <title>在Colab上运行项目（py文件及模块导入）</title>
    <url>/2022/07/19/colab/</url>
    <content><![CDATA[<h2 id="项目导入"><a href="#项目导入" class="headerlink" title="项目导入"></a>项目导入</h2><h3 id="方法1-直接上传到Google-Drive"><a href="#方法1-直接上传到Google-Drive" class="headerlink" title="方法1: 直接上传到Google Drive"></a>方法1: 直接上传到Google Drive</h3><p>优点：永久保存，不会被删除</p>
<p>缺点：需要授权访问google drive。安全风险</p>
<h3 id="方法2-Github-Clone过来"><a href="#方法2-Github-Clone过来" class="headerlink" title="方法2: Github Clone过来"></a>方法2: Github Clone过来</h3><p>优点：更方便。</p>
<p>缺点：文件隔几个小时会被清空</p>
<h2 id="模块引用"><a href="#模块引用" class="headerlink" title="模块引用"></a>模块引用</h2><p>出现错误</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://zhuanlan.zhihu.com/p/105647700">No module named ‘xxx’</a></li>
</ol>
]]></content>
      <categories>
        <category>TechNotes</category>
        <category>Cloud</category>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Github</tag>
        <tag>Python</tag>
        <tag>Remote</tag>
        <tag>Colab</tag>
      </tags>
  </entry>
  <entry>
    <title>Github常用命令及Desktop初体验</title>
    <url>/2022/07/14/git-cmd/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>有时代码明明没怎么改突然就不能用了，github合并机制挺全有时也让人抓狂，一直提示冲突。好不容易历史版本pull下来，想push上去，提示我必须把最新的pull下来……我要是最新的能用我会回退到历史版本吗！搁这套娃呢。</p>
<p>不想折腾冲突的我，找了一下午bug，发现是多删了个空格！！简单粗暴退到上一版本就没那么多事了！</p>
<p>于是整理下一些强制命令（。有风险就有风险……我可以备份啊！备份就1秒，找bug一下午过去了</p>
<h2 id="本地版本回滚（更安心）"><a href="#本地版本回滚（更安心）" class="headerlink" title="本地版本回滚（更安心）"></a>本地版本回滚（更安心）</h2><p>在本地回退到某一个版本（不影响远端），命令行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git checkout xxxx(commit号)</span><br></pre></td></tr></table></figure>

<p>其中xxx是一串类似2a3b4e的commit号，可以在github desktop-history找到。</p>
<p>也可以desktop里找到想要的回退版本，右键revert changes in commit</p>
<p>如果提示error，有conflicts，添加冲突的文件（error: Reverting is not possible because you have unmerged files.）</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git add filename(文件名)</span><br></pre></td></tr></table></figure>

<p>这时候就可以发现本地文件已经到历史版本了，但无法推送到分支，因为是detached head分支。这时想合并可以把这个保存为新分支，然后merge到主分支。</p>
<h2 id="提交历史版本（更简单粗暴）"><a href="#提交历史版本（更简单粗暴）" class="headerlink" title="提交历史版本（更简单粗暴）"></a>提交历史版本（更简单粗暴）</h2><p>除了revert，使用reset会更加简单粗暴</p>
<p>简单说，revert是永久时光机，能去过去，也能回未来。reset是一次性时光机，回到过去，未来就被擦掉了没有后悔药。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git reset --hard xxxx(commit号)</span><br></pre></td></tr></table></figure>

<p>这样github就不会提示你有新的没pull下来，不能push了。-f代表强制推送。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CMD</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义GithubPages域名+DNS解析加速</title>
    <url>/2022/07/11/git-new-domains/</url>
    <content><![CDATA[<h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p>前置要求：已完成网页搭建。用户名.github.io能够访问网页。</p>
<p>步骤</p>
<ol>
<li>申请一个新域名网址</li>
<li>域名网站操作：更改域名的DNS解析器（Nameservers）到cloudflare</li>
<li>Cloudflare操作：设置，映射IP地址到GIthub（DNS解析）</li>
<li>GIthub操作：右上角setting-page-domain 更改为新域名网址。</li>
</ol>
<p>下面是一些自问自答，可以直接跳后面步骤。</p>
<ul>
<li><p><strong>什么是DNS解析？</strong></p>
</li>
<li><p>参考AWS：域名系统 (DNS) 将人类可读的域名 (例如，<a href="http://www.amazon.com/">www.amazon.com</a>) 转换为机器可读的 IP 地址 (例如，192.0.2.44)。更细节的之后单独写一篇【link】</p>
</li>
<li><p><strong>Cloudflare用来加速，为什么要加速？</strong></p>
</li>
<li><p>因为慢！（废话）一是github国内访问越来越慢，在墙的边缘游走。二是使用默认方式DNS解析很慢！作为急性子，等了半天网页还是404，以为是哪步搞错了，捣鼓了很久发现没错就是他慢而已……如果耐得住寂寞（其实第一次DNS解析挺快的，可能是想博好感；国内的也挺快的，但是要备案），可以将2，3步合为一步。在域名网站直接进行DNS解析（可以不用看这篇了！）</p>
</li>
</ul>
<h2 id="1-申请新域名"><a href="#1-申请新域名" class="headerlink" title="1 申请新域名"></a>1 申请新域名</h2><p>域名有收费的和免费的。选择困难可以看看：关于选域名【link】</p>
<p>收费的用过namesilo，网页非常复古域名解析也慢……不过价格算便宜的。一年3～9刀。</p>
<p>下面以免费域名freenom为例。免费域名有效期12～24个月，freenom快到期的时候可以再免费续，无限套娃hhh</p>
<p>为了后面解释方便，比如我选了abc.com</p>
<h2 id="2-更改域名的nameservers到cloudflare"><a href="#2-更改域名的nameservers到cloudflare" class="headerlink" title="2 更改域名的nameservers到cloudflare"></a>2 更改域名的nameservers到cloudflare</h2><p>将默认的nameserver改到cloudflare</p>
<p>原来的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ns1.dnsowl.com</span><br><span class="line">ns2.dnsowl.com</span><br><span class="line">ns3.dnsowl.com</span><br></pre></td></tr></table></figure>

<p>现在改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">guss.ns.cloudflare.com</span><br><span class="line">martha.ns.cloudflare.com</span><br></pre></td></tr></table></figure>

<p>如下所示</p>
<p><img src="/pics/nameserver.png" alt="img"></p>
<h2 id="3-Cloudflare的DNS解析"><a href="#3-Cloudflare的DNS解析" class="headerlink" title="3 Cloudflare的DNS解析"></a>3 Cloudflare的DNS解析</h2><p>创建cloudflare账号，add site，输入新域名的网址abc.com</p>
<p>dns配置成如下格式</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Name</th>
<th>Content</th>
</tr>
</thead>
<tbody><tr>
<td><strong>A</strong></td>
<td>abc.com</td>
<td>185.199.108.153</td>
</tr>
<tr>
<td><strong>A</strong></td>
<td>abc.com</td>
<td>185.199.109.153</td>
</tr>
<tr>
<td><strong>A</strong></td>
<td>abc.com</td>
<td>185.199.110.153</td>
</tr>
<tr>
<td><strong>A</strong></td>
<td>abc.com</td>
<td>185.199.111.153</td>
</tr>
<tr>
<td><strong>CNAME</strong></td>
<td>www</td>
<td>abc.com</td>
</tr>
</tbody></table>
<p>那四个IP地址是github服务器的IP（每个人都一样，不用改）。为什么？</p>
<p>命令行 ping 一下自己的网站就懂了</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ping</span> 用户名.github.io</span><br><span class="line">#显示<span class="number">64</span> bytes from <span class="number">185</span>.<span class="number">199</span>.<span class="number">111</span>.<span class="number">153</span>: icmp_seq=<span class="number">122</span> ttl=<span class="number">53</span> <span class="built_in">time</span>=<span class="number">11</span>.<span class="number">644</span> ms</span><br></pre></td></tr></table></figure>

<p>提一嘴，如果是买的服务器不是githubpages，写一个IP地址就行。为什么github是四个IP？可能github人家有钱（？笑。总之我ping了好几次，这几个IP都有出现。</p>
<h2 id="3-在Github上改域名"><a href="#3-在Github上改域名" class="headerlink" title="3 在Github上改域名"></a>3 在Github上改域名</h2><p>进入仓库，右上角【 …】-【settings】</p>
<p>【Code and automation】-【pages】</p>
<p>【Custom domain】改为新域名【<a href="http://www.abc.com】并保存/">www.abc.com】并保存</a></p>
<p>当状态从【DNS Check in Progress】到【DNS successful】就可以用新域名访问啦。</p>
<p>几个tips</p>
<ul>
<li>无法显示？清除所有缓存。拿手机访问试试</li>
<li>设置后github自动生成了CNAME文件保存着新域名。为了防止下次更新被覆盖掉。在本地也建一个相同文件（放在source目录下</li>
</ul>
]]></content>
      <categories>
        <category>TechNotes</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>GithubPages</tag>
        <tag>DNS</tag>
        <tag>Cloudflare</tag>
        <tag>Domain</tag>
        <tag>Freenom</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<p>这行用来mc更新后网页是否也会同步更新。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/2022/07/11/hexo-cmd/</url>
    <content><![CDATA[<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>所有命令都在博客文件夹下进行。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 博客名</span><br></pre></td></tr></table></figure>



<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>写日志：source&#x2F;post下写md文档，写好后想提交</p>
<p>清除缓存</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>



<p>生成最新的generate</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>



<p>本地查看一下show</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>



<p>推送部署到云端deploy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d </span><br></pre></td></tr></table></figure>



<p>如果想加上传描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d -m &#x27;这里写提交描述&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><p>下面俩种写法等价</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo d -g </span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>



<p>如果觉得前面命令麻烦，不想debug，可以直接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo d -g <span class="comment">#先清除缓存，generate出新的文件，再deploy。</span></span><br></pre></td></tr></table></figure>



<p>同理其他命令也可以组合</p>
]]></content>
      <categories>
        <category>CMD</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中加入Github每日贡献图</title>
    <url>/2022/06/19/hexo-github-calendar/</url>
    <content><![CDATA[<h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p>前置要求：已完成网页搭建。</p>
<p>效果：</p>
<p><img src="/pics/gitCal.png" alt="img"></p>
<p>推荐参考[1]，整理的很全面。</p>
<h2 id="GitHub-Calendar生成步骤"><a href="#GitHub-Calendar生成步骤" class="headerlink" title="GitHub Calendar生成步骤"></a>GitHub Calendar生成步骤</h2><p>最简单的方法是直接生成图片引用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ghchart.rshah.org/你的用户名&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Github Chart&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://ghchart.rshah.org/jingcs" alt="Github Chart" />

<p>不过为了之后倒腾，下面还用了GitHub Calendar</p>
<h3 id="（1）安装"><a href="#（1）安装" class="headerlink" title="（1）安装"></a>（1）安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-githubcalendar --save</span><br></pre></td></tr></table></figure>



<h3 id="（2）修改根目录下的配置文件"><a href="#（2）修改根目录下的配置文件" class="headerlink" title="（2）修改根目录下的配置文件"></a>（2）修改根目录下的配置文件</h3><p>​	把下面的加到_config.yml文件夹中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">githubcalendar:</span><br><span class="line">  enable: true</span><br><span class="line">  priority: 0</span><br><span class="line">  enable_page: /</span><br><span class="line">  user: 你的github用户名</span><br><span class="line">  layout:</span><br><span class="line">    type: class</span><br><span class="line">    name: main-inner</span><br><span class="line">    index: 0</span><br><span class="line">  githubcalendar_html: &#x27;&lt;div class=&quot;post-block animated fadeIn&quot; style=&quot;width:100%;height:auto;padding:40px 10px 10px 10px;&quot;&gt;&lt;div id=&quot;github_loading&quot; style=&quot;height:100%;display: flex;align-items: center;justify-content: center;&quot;&gt;&lt;svg style=&quot;height:50px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;  viewBox=&quot;0 0 50 50&quot; style=&quot;enable-background:new 0 0 50 50&quot; xml:space=&quot;preserve&quot;&gt;&lt;path fill=&quot;#d0d0d0&quot; d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot; transform=&quot;rotate(275.098 25 25)&quot;&gt;&lt;animateTransform attributeType=&quot;xml&quot; attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 25 25&quot; to=&quot;360 25 25&quot; dur=&quot;0.6s&quot; repeatCount=&quot;indefinite&quot;&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id=&quot;github_container&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;footer class=&quot;post-footer&quot;&gt;&lt;div class=&quot;post-eof&quot;&gt;&lt;/div&gt;&lt;/footer&gt;&#x27;</span><br><span class="line">  pc_minheight: 280px</span><br><span class="line">  mobile_minheight: 0px</span><br><span class="line">  #颜色可以自己换，这个是黑白</span><br><span class="line">  color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#d3d5d8&#x27;, &#x27;#bcbdc0&#x27;, &#x27;#a4a5a8&#x27;, &#x27;#8d8e90&#x27;, &#x27;#757678&#x27;, &#x27;#5e5e60&#x27;, &#x27;#464748&#x27;, &#x27;#2f2f30&#x27;, &#x27;#2f363d&#x27;, &#x27;#24292e&#x27;]&quot;</span><br><span class="line">  api: https://python-github-calendar-api.vercel.app/api</span><br><span class="line">  #在国内网速慢可以用gitee这个</span><br><span class="line">  #api: https://python-gitee-calendar-api.vercel.app/api</span><br><span class="line">  calendar_js: https://cdn.jsdelivr.net/gh/jingcs/jingcs.github.io/js/git-calendar-cn.js</span><br><span class="line">  plus_style: &quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="（3）运行"><a href="#（3）运行" class="headerlink" title="（3）运行"></a>（3）运行</h3><p>先本地运行看效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp; hexo g &amp; hexo s </span><br></pre></td></tr></table></figure>

<p>注意，三条命写一起有如果报错找不到json。分开运行就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>没有变化清理一下缓存。</p>
<p>没问题的话就提交到github</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://blog.meta-code.top/2022/03/15/2022-41/">在主页展示GitHub&#x2F;Gitee贡献度日历</a> 推荐 整理的很全面，包含了第2个的网址</li>
<li><a href="https://gagalab.tech/2021/07/14/Next%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8Github%E8%B4%A1%E7%8C%AE%E6%97%A5%E5%8E%86%E6%95%99%E7%A8%8B/">手把手教你在Hexo中使用Github贡献日历（以Next主题为例）</a></li>
<li><a href="https://www.freesion.com/article/7086773921/">贡献图，不是hexo的</a></li>
</ol>
<h2 id="进一步待填坑"><a href="#进一步待填坑" class="headerlink" title="进一步待填坑"></a>进一步待填坑</h2><ul>
<li>没有显示每天的commit次数(好像是网速问题)</li>
<li>js直接插到md里</li>
</ul>
]]></content>
      <categories>
        <category>TechNotes</category>
        <category>WebUI</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Javascript</tag>
        <tag>StatisticsDisplay</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GitHubPages&amp;Hexo搭建个人网页</title>
    <url>/2022/06/16/hexo-gitpages-install/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>用Github做网页，就是把github当免费服务器，网页文件全存GitHub仓库上。但因为Github没有数据库，更适合做静态网页。（动态进阶pending。这里的hexo就是个网页模板。官方推荐的还有Jekyll（国内貌似比较慢）。理论上hexo做出来的东西可以放任何服务器上，Github最方便。</p>
<p>基本步骤就三步。</p>
<p>首先，用hexo创建网页模板。</p>
<p>然后，注册github建个仓库。</p>
<p>最后，将网页模板传到github仓库上。</p>
<p>就完成了。注意，Github网页无法做到实时更新，大概有三五分钟的延误。搞了一上午以为步骤不对网页怎么没变化，结果是我太心急……</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><strong>本地创建好网页</strong></li>
</ol>
<p>安装hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli  </span><br></pre></td></tr></table></figure>

<p>用hexo建网页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init xxx博客名（名字开心就好，不会显示在网页上）</span><br><span class="line">cd xxx博客名</span><br><span class="line">npm install </span><br><span class="line">npm install hexo-deployer-git --save #安装用于commit的程序</span><br><span class="line">npm i hexo-deployer-git #安装发布新文章</span><br></pre></td></tr></table></figure>

<p>至此，网页已经建好了，本地效果可以运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>Github注册建仓库</strong></li>
</ol>
<p>注册就不说了，建仓库就是点绿色按钮Create a new repository</p>
<p>有俩点需要注意</p>
<ul>
<li><strong>Repository name必须是 你github用户名.</strong><a href="http://github.io/"><strong>github.io</strong></a></li>
<li><strong>设置默认分支名从main到master！！</strong><a href="https://github.com/settings/repositories"><strong>https://github.com/settings/repositories</strong></a></li>
</ul>
<p>第二点网上好多教程没提过。多摆俩句是因为master这词涉嫌歧视，在20年国外zzzq把默认的分支名从master换为main了。很多软件还是按照master写的。不改名可能会新建出一个master分支，每次提交push到master分支上，得合并。</p>
<p>SSH密钥授权待补</p>
<ol start="3">
<li><strong>将Hexo传到Github</strong></li>
</ol>
<p>有俩种方法，一种是命令行， 一种是github desktop </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#命令行，前提已经cd进hexo所在位置</span><br><span class="line">hexo clean  #保险起见清理缓存</span><br><span class="line">hexo d -g   </span><br></pre></td></tr></table></figure>

<p>打开浏览器 用户名.github.io就是网页</p>
<p>也可以d上传前先debug一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>



<h2 id="进一步待填坑"><a href="#进一步待填坑" class="headerlink" title="进一步待填坑"></a>进一步待填坑</h2><ol start="4">
<li><p>更改域名</p>
<p>github上：settings- pages- custom domain 输入买好的，想要自定义的域名</p>
<p>域名上：将github用户名.github.io加入到chame</p>
<p>网页文件：新建CHAME文件，无后缀，在里面写上想自定义的域名</p>
<p>重新提交</p>
<p>注意最多可能会要48小时才能更新！（一般十来分钟</p>
</li>
</ol>
<p>[ ] 发布文章后主页不更新</p>
<p>[ ] 插入图片</p>
<p>source目录下新建images文件夹专门存储图片，图片引用方式为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![img](/images/xxx.png)</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>创建过程都很详细，黑字是备注的每个教程的不同侧重点</p>
<ol>
<li><p><a href="https://godweiyang.com/2018/04/13/hexo-blog/">超详细Hexo+Github博客搭建小白教程</a> 强烈安利这篇，非常详细，还开源了代码。水印，挂件，统计工具，BGM，评论，特效，答疑等等</p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000017986794">超详细Hexo+Github Page搭建技术博客教程【持续更新】</a> 额外功能，域名，SOE搜索优化，其他插件程序等</p>
</li>
<li><p><a href="https://learnku.com/articles/45697#replies">超详细 Hexo + GitHub Page 搭建技术 blog 教程</a> 还有Hexo常用命令，模板推荐</p>
</li>
</ol>
]]></content>
      <categories>
        <category>TechNotes</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GithubPages</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hexo+Next的进阶美化操作</title>
    <url>/2022/06/18/hexo-next-ada-toolkit/</url>
    <content><![CDATA[<h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p>前提：已完成Hexo网页搭建，完成Next模板设置</p>
<p>参考官方文档，进一步设置<a href="https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A1/">https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A1/</a></p>
]]></content>
      <categories>
        <category>TechNotes</category>
        <category>WebUI</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>StatisticsDisplay</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络-网络协议IPv4和IPv6</title>
    <url>/2022/07/12/ip-intro/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个系列是在实践中对计算机网络相关知识概念的整理。</p>
<h2 id="关于IP"><a href="#关于IP" class="headerlink" title="关于IP"></a>关于IP</h2><p>IP：Internet Protocol（网际互连协议）</p>
<p>IP是TCP&#x2F;IP体系中的网络层协议，是整个TCP&#x2F;IP协议族的核心，构成互联网的基础。</p>
<ul>
<li><p>对上载送传输层各种协议信息（TCP、UDP等）</p>
</li>
<li><p>对下将IP信息包放到链路层（以太网、令牌环网络等来传送）。[1]</p>
</li>
</ul>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>IP在OSI模型中位于网络层，TCP&#x2F;IP和OSI说白了就是不同专家对计算机网络结构的不同定义。链路层传输层这些词也是定义的一部分。详细介绍和区别【link待填坑】</p>
<p>要是我早生几十年就把它定义成网络一二三四五多好记！</p>
<p>好像说了很多，但还是没有人说它究竟在干嘛。天天网上冲浪，按理说都或多或少接触过。简单说IP是种协议，它制定了信息传输的标准（IP地址，mac地址），让我们能上网。</p>
<p>IP地址，没错就是那串用电子设备连wifi流量 被分配的类似192.168.1.0的数字，可以想象成你的住址。更有趣的一点，互联网上的一切都是有IP地址的！包括网站和应用程序</p>
<p>所以<strong>上网其实就是用你的IP访问另一个IP的过程！</strong></p>
<p>至此，就能很好理解为什么微博可以显示发博地，社交媒体即使关了智能算法推荐还是很能“懂”你了。</p>
<p>对于用户，IP地址可以理解为就近分配。所以app读出你的住址，你邻居的住址，然后把你们看的互相推送（。梯子可以一定程度规避，真想找也能找到你的原始地址，目前各大app还没有那么丧心病狂就是了，毕竟我们也有忘挂梯子的时候。</p>
<p>IP为什么就近分配？想象一下，人在广东，想家里上网，会跑上海服务点办入网吗？我们注意到连同一wifi，每次分配的IP地址可能有些不同，但大范围（前几位数）总是固定的，这个大范围能够读到你在哪，专业术语是主机。</p>
<h2 id="IPv4和IPv6"><a href="#IPv4和IPv6" class="headerlink" title="IPv4和IPv6"></a>IPv4和IPv6</h2><p>字面意思非常简单，不同年代发布的协议版本。第4版（version 4）和第六版（version 6）。果然非母语容易被唬着。</p>
<h3 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h3><p>IPv4规定地址32位（二进制），十进制写法xxx.xxx.xxx.xxx，其中xxx取值范围0～255。</p>
<p>1981年被提及。PS当年全球人口40亿左右。前面说到，上网就是一个IP访问另一个IP地址。于是专家们想，我们协议搞40亿（ $2^{32}$）左右个IP地址，差不多人手一个，大家都有网上！</p>
<h3 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h3><p>那时候专家没想到电子设备能这么普及，从一家一台变为一人N台……。然后就发现IP地址不够用了啊！提案有很多，比如IPv6，网络地址转换（现在还在用）。</p>
<p>网络地址转换简单说就是一个人一个IP太奢侈了，我们决定很多人共用一个IP！内网外网用的就是他。咱就是说……一开始多整点坑位，我就不用学这么多了……</p>
<h3 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h3><p>IPv6想法很简单粗暴，地址不够用，那我允许存更多不就完事了，长长长！</p>
<p>IPv6规定地址128位（32进制），按全球80亿人，每人都能分配到数万亿亿个，以我们现在的眼界感觉是够用了。</p>
<p>目前是IPv4和IPv6混用的状态。</p>
<h3 id="IPv4-格式"><a href="#IPv4-格式" class="headerlink" title="IPv4 格式"></a>IPv4 格式</h3><p>待填</p>
<p>服务器 主机 等</p>
<h2 id="自问自答"><a href="#自问自答" class="headerlink" title="自问自答"></a>自问自答</h2><p><strong>网址和IP地址</strong></p>
<p>上网的过程是IP间的访问，但我们都是输google.com而不是那一串IP地址诶？</p>
<p>拿IPv4来说，几十亿个实在是太难记了啊！所以我们给IP地址穿上了网址的衣服，我们只记网址，电脑网址和IP两个都记。让电脑透过表面看本质，这个过程称为DNS解析。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://m.300.cn/itzspd/457078.html">IP协议介绍</a></li>
<li><a href="https://zh.m.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">网络地址转换</a></li>
</ol>
]]></content>
      <categories>
        <category>PlainTech</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>TCP/IP</tag>
        <tag>NetworkLayer</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown常用命令</title>
    <url>/2022/07/15/md-cmd/</url>
    <content><![CDATA[<p>金鱼脑记一些常用</p>
<h2 id="代码公式"><a href="#代码公式" class="headerlink" title="代码公式"></a>代码公式</h2><h3 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$公式$</span><br></pre></td></tr></table></figure>

<p>效果 $x^2$</p>
<p>Q：公式没反应</p>
<p>A：typora-偏好设置- markdown语法-勾选所有</p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>三个&#96;，mac电脑按中英切换键，再按波浪号（1左边）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```code```</span><br></pre></td></tr></table></figure>



<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>插入链接&#x2F;图片都是以下格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![备注](url)</span><br></pre></td></tr></table></figure>

<p>⚠️不要写反了！❌   !(备注)[url] ❌ </p>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><ul>
<li><p>本地引用</p>
<p>注意pics指专属图片文件夹。如图片和md放在同一文件夹下，直接引用。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![img](/pics/xxx.png)</span><br></pre></td></tr></table></figure>

<ul>
<li>云端引用 (github图床)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](https://cdn.jsdelivr.net/gh/用户名/仓库名/文件夹/xxxx.jpg)</span><br></pre></td></tr></table></figure>

<h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><p>同理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![备注](url)</span><br></pre></td></tr></table></figure>

<p>效果<a href="www.google.com">google’s url</a></p>
]]></content>
      <categories>
        <category>CMD</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Md</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>使用服务器搭建一个自己的VPN</title>
    <url>/2022/07/18/vps_ssr/</url>
    <content><![CDATA[<h2 id="整体步骤"><a href="#整体步骤" class="headerlink" title="整体步骤"></a>整体步骤</h2><ol>
<li>买服务器</li>
<li>安装加速器</li>
<li>安装SSR</li>
</ol>
<h2 id="1-买服务器"><a href="#1-买服务器" class="headerlink" title="1 买服务器"></a>1 买服务器</h2><p>有许多服务器供选择，比如vultr每月最低3.5美金。</p>
<p>Cloud Compute - Regular Performance - New York (NJ)</p>
<h2 id="2-安装BBR加速器"><a href="#2-安装BBR加速器" class="headerlink" title="2 安装BBR加速器"></a>2 安装BBR加速器</h2><p>然后打开命令行工具</p>
<p><strong>进入服务器</strong></p>
<p>ssh root@服务器的IP</p>
<p>输入yes，输入服务器密码（购买网页上有复制下来）</p>
<p>显示[root@server3 ~]# 即登录成功</p>
<p><strong>安装谷歌BBR加速器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure>

<p>安装完后，按提示重启 VPS，输入 Y 回车重启。稍候 1min 等待重启完成，再重新连接 Xshell。重启后输入 lsmod | grep bbr ，出现 tcp_bbr 即说明 BBR 已经启动。</p>
<h2 id="3-安装SSR"><a href="#3-安装SSR" class="headerlink" title="3 安装SSR"></a>3 安装SSR</h2><p>依次运行下面三条命令。分别代表下载SSR安装包，给安装包可运行的权限，安装安装包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line"> ./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>

<p>之后依次输入密码，端口（看你心情随意设置），选择加密方式等等。全部弄完按回车，他就自动安装了。安装好后会打印一堆刚刚自己设的信息，这就是登录凭证了。</p>
<h2 id="可以用了"><a href="#可以用了" class="headerlink" title="可以用了"></a>可以用了</h2><p>把自己上面设置的信息，输进去就可以用了</p>
<ul>
<li>Windows 版本 ShadowsocksR</li>
<li>Android 版本 ShadowsocksR APK文件</li>
<li>MAC 电脑 ShadowsocksX dmg安装包</li>
<li>IOS <strong>App Store</strong>搜索 <strong>potatso lite</strong>自行安装 （海外store）</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://wmovc.com/758/">VPS</a></li>
<li><a href="%5Bhttps://jackmezone.medium.com/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-vultr-vps-%E6%90%AD%E5%BB%BA-shadowsocks-ss-%E6%95%99%E7%A8%8B-%E6%96%B0%E6%89%8B%E5%90%91-968613081aae%5D(https://jackmezone.medium.com/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-vultr-vps-%E6%90%AD%E5%BB%BA-shadowsocks-ss-%E6%95%99%E7%A8%8B-%E6%96%B0%E6%89%8B%E5%90%91-968613081aae)">科学上网：Vultr VPS 搭建 Shadowsocks（ss）教程（新手向）</a>（不知道ios怎么用）</li>
<li><a href="https://github.com/lewisYe/front-end-engineer/issues/35">Mac vultr搭建ss教程</a></li>
<li><a href="http://spechles.cn/2016/03/01/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E4%B8%AA%E6%A2%AF%E5%AD%90/">图裂了但是挺清晰的</a></li>
</ol>
]]></content>
      <categories>
        <category>TechNotes</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>BBR</tag>
        <tag>SSR</tag>
        <tag>VPN</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo日志使用方法</title>
    <url>/2022/06/16/616-hexo-usage-backup/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前置：Hexo+GitHub，生成可访问的网站【见：<a href="http://localhost:4000/2022/06/16/hexo-gitpages-install/">搭建网站</a> 】。</p>
<p>本篇：如何发布新日志，总过程如下</p>
<ul>
<li><p>新建日志的路径</p>
<ul>
<li><p>直接在 路径<strong>hexo博客名&#x2F;source&#x2F;_posts</strong> 下手动新建xxx.md文件</p>
<p>自己写需要注意格式，否则可能会报错</p>
</li>
<li><p>使用命令行 <strong>cd 博客名</strong> ；然后<strong>hexo new post “xxxx日志名”</strong></p>
</li>
</ul>
<p>注：xxx最好是英文，后面也可以改</p>
</li>
<li><p>打开文件写日志</p>
<p>有关文章标题，发布时间，分类的设置，可见官方文档[1]。摘录如下</p>
<ul>
<li><p>tags, categories</p>
<p>分类categories具有顺序性和层次性，为文章添加多个分类。此时文章同时包括三个分类： <strong><code>PlayStation</code> 和 <code>Games</code></strong> 分别都是父分类 <code>Diary</code> 的子分类，同时 <strong><code>Life</code></strong> 是一个没有子分类的分类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]</span><br></pre></td></tr></table></figure>

<p>标签tags没有顺序和层次。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Air</span><br><span class="line">- Trainline</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>将日志同步到Github上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<p>之后想修改日志也是改md然后用这命令传上去。</p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>Front-matter <a href="https://hexo.io/zh-cn/docs/front-matter">官方文档</a></li>
</ol>
]]></content>
      <categories>
        <category>TechNotes</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GithubPages</tag>
      </tags>
  </entry>
  <entry>
    <title>在wordpress中加入文章阅读量浏览量（javascript）</title>
    <url>/2022/07/16/wp-views-counter-auto-update/</url>
    <content><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>整体参考[1]</p>
<p>增加了整体步骤，文件插入位置，以及使用【特定主题】时，怎么找到地方插入。</p>
<p>整体步骤</p>
<ol>
<li>编写计数函数</li>
<li>自定义统计间隔时间</li>
<li>将views值插入到想显示的地方</li>
</ol>
<h2 id="1-编写计数函数"><a href="#1-编写计数函数" class="headerlink" title="1 编写计数函数"></a>1 编写计数函数</h2><p>复制以下函数到functions.php文件最后。</p>
<p>具体操作是左边导航栏在appearance- editor</p>
<p>content主题是右边栏的Theme Functions</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPostViews</span>(<span class="params">$postID</span>)&#123;</span><br><span class="line">    $count_key = <span class="string">&#x27;views&#x27;</span>;</span><br><span class="line">    $count = <span class="title function_">get_post_meta</span>($postID, $count_key, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span>($count==<span class="string">&#x27;&#x27;</span> || !$count)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setPostViews</span>(<span class="params">$postID</span>)&#123;</span><br><span class="line">    $count_key = <span class="string">&#x27;views&#x27;</span>;</span><br><span class="line">    $count = <span class="title function_">get_post_meta</span>($postID, $count_key, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span>($count==<span class="string">&#x27;&#x27;</span> || !$count) &#123;</span><br><span class="line">        $count = <span class="number">1</span>;</span><br><span class="line">        <span class="title function_">delete_post_meta</span>($postID, $count_key);</span><br><span class="line">        <span class="title function_">add_post_meta</span>($postID, $count_key, $count);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $count++;</span><br><span class="line">        <span class="title function_">update_post_meta</span>($postID, $count_key, $count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-自定义统计间隔时间"><a href="#2-自定义统计间隔时间" class="headerlink" title="2 自定义统计间隔时间"></a>2 自定义统计间隔时间</h2><p>添加以下代码至主题的single.php 文件最上面</p>
<p>其中99999999是设置的间隔时间，间隔时间内，cookie相同的访问不累加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_">isset</span>($_COOKIE[<span class="string">&#x27;views&#x27;</span>.<span class="property">$post</span>-&gt;<span class="variable constant_">ID</span>.<span class="property">COOKIEHASH</span>]) || $_COOKIE[<span class="string">&#x27;views&#x27;</span>.<span class="property">$post</span>-&gt;<span class="variable constant_">ID</span>.<span class="property">COOKIEHASH</span>] != <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_">setPostViews</span>($post-&gt;<span class="variable constant_">ID</span>);</span><br><span class="line">    <span class="title function_">setcookie</span>(<span class="string">&#x27;views&#x27;</span>.<span class="property">$post</span>-&gt;<span class="variable constant_">ID</span>.<span class="property">COOKIEHASH</span>,<span class="string">&#x27;1&#x27;</span>,<span class="title function_">time</span>() + <span class="number">99999999</span>,<span class="variable constant_">COOKIEPATH</span>,<span class="variable constant_">COOKIE_DOMAIN</span>);</span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>注意，如果没有找到single.php</p>
<p>可以看看右边的小字<em>This child theme inherits templates from a parent theme XXXX</em></p>
<p>切换到XXXX，就能找到了</p>
<h2 id="3-将views值插入到想显示的地方"><a href="#3-将views值插入到想显示的地方" class="headerlink" title="3 将views值插入到想显示的地方"></a>3 将views值插入到想显示的地方</h2><p>将views添加到要显示浏览次数的位置</p>
<p>文章列表(template-parts&#x2F;content.php)</p>
<p>文章详情页面(template-parts&#x2F;content-single.php)</p>
<p>搜索结果页面(template-parts&#x2F;content-search.php)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php echo <span class="string">&#x27;阅读量：&#x27;</span>.<span class="title function_">getPostViews</span>(<span class="title function_">get_the_ID</span>());.<span class="string">&#x27;次&#x27;</span>?&gt;</span><br></pre></td></tr></table></figure>

<p>这里踩坑</p>
<p>对于不同主题，文件有差异。</p>
<p>比如我目前用的content主题。显示【作者xxx分类xxxtagsxxx】都封装在了spicepress_single_post_category_content()函数中。单独加上去字体颜色不一样也不再一排。需要找到这个函数，并在里面添加views。</p>
<p>content是在 template-tags.php 中</p>
<p>还可以设置下css样式我懒了就直接这样加了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_">get_theme_mod</span>(<span class="string">&#x27;spicepress_enable_single_post_tag&#x27;</span>,<span class="literal">true</span>)==<span class="literal">true</span>):	</span><br><span class="line">	$spicepress_tag_list = <span class="title function_">get_the_tag_list</span>();</span><br><span class="line">	<span class="keyword">if</span>(!<span class="title function_">empty</span>($spicepress_tag_list)) &#123; ?&gt;</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tag-links&quot;</span>&gt;</span><span class="meta">&lt;?php esc_html_e(&#x27;Tag&#x27;,&#x27;spicepress&#x27;);?&gt;</span> <span class="meta">&lt;?php the_tags(&#x27;&#x27;, &#x27;, &#x27;, &#x27;&#x27;); ?&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;?php echo <span class="string">&#x27;Views &#x27;</span>.<span class="title function_">getPostViews</span>(<span class="title function_">get_the_ID</span>()).<span class="string">&#x27;&#x27;</span>;?&gt;	在这加</span><br><span class="line">	&lt;?php &#125; </span><br><span class="line">endif;?&gt;</span><br></pre></td></tr></table></figure>

<p>最后效果</p>
<p><img src="/pics/views-counter.png" alt="views-counter"></p>
<p>其他地方读了代码后可以同理修改</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://m.php.cn/cms/wordpress/478394.html">详解WordPress文章阅读量如何统计和显示（非插件）</a></li>
</ol>
]]></content>
      <categories>
        <category>Toolkit</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>Wordpress</tag>
        <tag>Javascript</tag>
        <tag>StatisticsDisplay</tag>
        <tag>Wp</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Morgan</title>
    <url>/2022/07/19/off-mor/</url>
    <content><![CDATA[<h2 id="xxx"><a href="#xxx" class="headerlink" title="xxx"></a>xxx</h2><p>随便存一下</p>
<p><img src="/pics/morgan/m1.png" alt="m1"></p>
<p><img src="/pics/morgan/m2.png" alt="m2"></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>MorganStanley</tag>
      </tags>
  </entry>
</search>
